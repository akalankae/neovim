# tmux configuration
# Default path: $HOME/.tmux.conf
# Tmux keybindings and configurations for vim-tmux-navigator plugin
# KNOWN PROBLEMS:
# â˜… <C-h/j/k/l> doesn't work in special mode. e.g. <C-x><C-k> for dictionary completion
#

# <Prefix>[  to enter COPY mode and <Enter> to exit
# <Prefix>? List keybindings
# <Prefix>: Enter COMMAND mode and <Enter> to exit

# Tell tmux to start a non-login shell, so .zshrc will be sourced
set-option -g default-command $SHELL

# Vi mode in Tmux
# NOTE: confirm this by typing "list-keys -T copy-mode-vi" on Tmux command line
# (i.e. <Prefix>:)
set-window-option -g mode-keys vi

# In copy mode "v" starts a selection and  "y" finishes selection and copies
# Copy selection with "<Prefix>]"
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-selection-and-cancel

# Change default prefix key from Ctrl-b to Ctrl-a
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

# Change keys to launch windows horizontally and vertically
# Unbind original % for horizontal & " for vertical pane navigation
unbind %
unbind '"'

# prefix+s for horizontal
bind s split-window -v -c "#{pane_current_path}"
# prefix+v for vertical
bind v split-window -h -c "#{pane_current_path}"

# Customizing Tmux navigation behaviour
# Start pane switchig with awareness of Vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
# Install vim-tmux-navigator in vim/neovim (use "christoomey/vim-tmux-navigator")
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# Change keys to navigate between panes without using prefix key:
# -n means these bindings do not use the prefix key, use Ctrl+<KEY> instead
# NOTE: mapping <Ctrl-h/j/k/l> for navigation between panes, like in vim/neovim.
# However, this means you cannot use <Ctrl-l> to clear the terminal screen in tmux.
# Read below for a solution for this problem.
 bind-key -n C-h if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
 bind-key -n C-j if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
 bind-key -n C-l if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'
 bind-key -n C-k if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'

# NOTE: We cannot usually navigate between a tmux pane/window running shell, and a tmux 
# pane running vim/neovim with <C-KEY> mappings. 
# (when you open tmux panes in a tmux window, these are outermost tmux panes,
# when you split these panes and open new ones these are inner/nested tmux panes,
# when you open vim on a tmux pane, it is an outermost vim session, however,
# when you make a vim split, it is an inner, aka "nested" vim session)
#
# Vim-tmux-navigator plugin and configuration below DOES following things;
# 1. navigate between outermost tmux panes and outermost vim sessions.
# 2. open nested tmux panes, inside of a vim session with <C-w>
# They CANNOT DO following things;
# 1. navigate between outer and inner vim sessions with <C-NAVIGATION_KEY
# 2. navigate between tmux panes and inner vim sessions with <C-NAVIGATION_KEY
#
# NOTE: vim-tmux-navigator is will not work properly when vim sessions are nested.
# By default this plugin works for outermost tmux session and vim sessions it
# contains. Following fallback mappings can be targeted to the right Tmux session by
# escaping the prefix (Tmux' send-prefix command)
# "bind" is an alias to "bind-key"

 # bind -r C-h run "tmux select-pane -L"
 # bind -r C-j run "tmux select-pane -D"
 # bind -r C-k run "tmux select-pane -U"
 # bind -r C-l run "tmux select-pane -R"
 # bind -r C-\ run "tmux select-pane -l"

 bind -r C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
 bind -r C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
 bind -r C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
 bind -r C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
 bind -r C-\\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-\) || tmux select-pane -l"

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\' 'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 4.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\' 'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# Resize panes
bind l resize-pane -L 5  # Move vertical margin between panes to left
bind r resize-pane -R 5  # Move vertical margin between panes to right
bind d resize-pane -D 5  # Move horizontal margin between panes down
bind u resize-pane -U 5  # Move horizontal margin between panes up

bind L resize-pane -L 10  # Move vertical margin between panes to left
bind R resize-pane -R 10  # Move vertical margin between panes to right
bind D resize-pane -D 10  # Move horizontal margin between panes down
bind U resize-pane -U 10  # Move horizontal margin between panes up

# Map prefix+q binding to prefix+Q
# So as to use, <Ctrl-w>+q to close window
unbind q

# Default readline keybinding for clear screen "<C-l>" is over-written by our navigate
# to right command. Let us use <Prefix> <C-l> instead.
bind C-l send-keys 'C-l'
